{
  "org_name": "CloudSmith-Delivery-Agent-Risk-Analysis",
  "repo_name": "pethospital",
  "repo_url": "https://github.com/CloudSmith-Delivery-Agent-Risk-Analysis/pethospital",
  "infrastructure_providers": [
    {
      "provider_id": "pets_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "pet-hospital-pets",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores pet data for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${AWS_REGION}.amazonaws.com",
          "operations": [
            "GetItem",
            "PutItem",
            "UpdateItem",
            "DeleteItem",
            "Query",
            "Scan",
            "BatchGetItem",
            "BatchWriteItem"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery_enabled": true
      },
      "security": {
        "access_policy": "IAM role-based with least privilege permissions",
        "policy_file": "infrastructure/modules/eks/policies/dynamodb-policy.json"
      },
      "environment_variables": [
        "DYNAMODB_TABLE=pet-hospital-pets"
      ],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "environment": "${var.environment}"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "hospitals_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "pet-hospital-hospitals",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores hospital data for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${AWS_REGION}.amazonaws.com",
          "operations": [
            "GetItem",
            "PutItem",
            "UpdateItem",
            "DeleteItem",
            "Query",
            "Scan",
            "BatchGetItem",
            "BatchWriteItem"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery_enabled": true
      },
      "security": {
        "access_policy": "IAM role-based with least privilege permissions",
        "policy_file": "infrastructure/modules/eks/policies/dynamodb-policy.json"
      },
      "environment_variables": [
        "DYNAMODB_TABLE=pet-hospital-hospitals"
      ],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "environment": "${var.environment}"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "doctors_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "pet-hospital-doctors",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores doctor data for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${AWS_REGION}.amazonaws.com",
          "operations": [
            "GetItem",
            "PutItem",
            "UpdateItem",
            "DeleteItem",
            "Query",
            "Scan",
            "BatchGetItem",
            "BatchWriteItem"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery_enabled": true
      },
      "security": {
        "access_policy": "IAM role-based with least privilege permissions",
        "policy_file": "infrastructure/modules/eks/policies/dynamodb-policy.json"
      },
      "environment_variables": [
        "DYNAMODB_TABLE=pet-hospital-doctors"
      ],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "environment": "${var.environment}"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "visits_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "pet-hospital-visits",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores visit data for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${AWS_REGION}.amazonaws.com",
          "operations": [
            "GetItem",
            "PutItem",
            "UpdateItem",
            "DeleteItem",
            "Query",
            "Scan",
            "BatchGetItem",
            "BatchWriteItem"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery_enabled": true
      },
      "security": {
        "access_policy": "IAM role-based with least privilege permissions",
        "policy_file": "infrastructure/modules/eks/policies/dynamodb-policy.json"
      },
      "environment_variables": [
        "DYNAMODB_TABLE=pet-hospital-visits"
      ],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "environment": "${var.environment}"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "billing_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "pet-hospital-billing",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores billing data for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${AWS_REGION}.amazonaws.com",
          "operations": [
            "GetItem",
            "PutItem",
            "UpdateItem",
            "DeleteItem",
            "Query",
            "Scan",
            "BatchGetItem",
            "BatchWriteItem"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery_enabled": true
      },
      "security": {
        "access_policy": "IAM role-based with least privilege permissions",
        "policy_file": "infrastructure/modules/eks/policies/dynamodb-policy.json"
      },
      "environment_variables": [
        "DYNAMODB_TABLE=pet-hospital-billing"
      ],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "environment": "${var.environment}"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "insurance_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "pet-hospital-insurance",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores insurance data for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${AWS_REGION}.amazonaws.com",
          "operations": [
            "GetItem",
            "PutItem",
            "UpdateItem",
            "DeleteItem",
            "Query",
            "Scan",
            "BatchGetItem",
            "BatchWriteItem"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery_enabled": true
      },
      "security": {
        "access_policy": "IAM role-based with least privilege permissions",
        "policy_file": "infrastructure/modules/eks/policies/dynamodb-policy.json"
      },
      "environment_variables": [
        "DYNAMODB_TABLE=pet-hospital-insurance"
      ],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "environment": "${var.environment}"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "pet_service_ecr",
      "resource_type": "ECR",
      "resource_identifier": "pet-hospital-pet-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR Repository for storing pet service container images",
      "interfaces": [
        {
          "interface_type": "container_registry",
          "endpoint_pattern": "${aws_account_id}.dkr.ecr.${region}.amazonaws.com/pet-hospital-pet-service",
          "operations": [
            "PushImage",
            "PullImage"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "image_scanning": {
          "scan_on_push": true
        },
        "lifecycle_policy": {
          "max_image_count": 10
        }
      },
      "security": {
        "access_policy": "IAM role-based policies",
        "pull_access": "EKS node role"
      },
      "environment_variables": [],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "referenced_in": "k8s/base/pet-service.yaml"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "hospital_service_ecr",
      "resource_type": "ECR",
      "resource_identifier": "pet-hospital-hospital-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR Repository for storing hospital service container images",
      "interfaces": [
        {
          "interface_type": "container_registry",
          "endpoint_pattern": "${aws_account_id}.dkr.ecr.${region}.amazonaws.com/pet-hospital-hospital-service",
          "operations": [
            "PushImage",
            "PullImage"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "image_scanning": {
          "scan_on_push": true
        },
        "lifecycle_policy": {
          "max_image_count": 10
        }
      },
      "security": {
        "access_policy": "IAM role-based policies",
        "pull_access": "EKS node role"
      },
      "environment_variables": [],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "referenced_in": "k8s/base/hospital-service.yaml"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "doctor_service_ecr",
      "resource_type": "ECR",
      "resource_identifier": "pet-hospital-doctor-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR Repository for storing doctor service container images",
      "interfaces": [
        {
          "interface_type": "container_registry",
          "endpoint_pattern": "${aws_account_id}.dkr.ecr.${region}.amazonaws.com/pet-hospital-doctor-service",
          "operations": [
            "PushImage",
            "PullImage"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "image_scanning": {
          "scan_on_push": true
        },
        "lifecycle_policy": {
          "max_image_count": 10
        }
      },
      "security": {
        "access_policy": "IAM role-based policies",
        "pull_access": "EKS node role"
      },
      "environment_variables": [],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "referenced_in": "k8s/base/doctor-service.yaml"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "frontend_ecr",
      "resource_type": "ECR",
      "resource_identifier": "pet-hospital-frontend",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR Repository for storing frontend container images",
      "interfaces": [
        {
          "interface_type": "container_registry",
          "endpoint_pattern": "${aws_account_id}.dkr.ecr.${region}.amazonaws.com/pet-hospital-frontend",
          "operations": [
            "PushImage",
            "PullImage"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "image_scanning": {
          "scan_on_push": true
        },
        "lifecycle_policy": {
          "max_image_count": 10
        }
      },
      "security": {
        "access_policy": "IAM role-based policies",
        "pull_access": "EKS node role"
      },
      "environment_variables": [],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "referenced_in": "k8s/base/frontend.yaml"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "eks_cluster",
      "resource_type": "EKS",
      "resource_identifier": "${project_prefix}-eks-cluster",
      "file_path": "infrastructure/modules/eks/main.tf",
      "infrastructure_type": "Terraform",
      "description": "EKS cluster for running pet hospital microservices",
      "interfaces": [
        {
          "interface_type": "kubernetes_cluster",
          "endpoint_pattern": "${cluster_name}.${region}.eks.amazonaws.com",
          "operations": [
            "CreateCluster",
            "DescribeCluster",
            "UpdateClusterConfig",
            "DeleteCluster"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "version": "${var.kubernetes_version}",
        "logging": {
          "enabled_types": ["api", "audit", "authenticator", "controllerManager", "scheduler"]
        },
        "networking": {
          "endpoint_private_access": true,
          "endpoint_public_access": true
        }
      },
      "security": {
        "iam_roles": {
          "cluster_role": "${var.cluster_name}-cluster-role",
          "node_role": "${var.cluster_name}-node-role"
        },
        "managed_policies": [
          "AmazonEKSClusterPolicy",
          "AmazonEKSVPCResourceController",
          "AmazonEKSWorkerNodePolicy",
          "AmazonEKS_CNI_Policy",
          "AmazonEC2ContainerRegistryReadOnly"
        ],
        "custom_policies": [
          "node-dynamodb-access",
          "node-cloudwatch-access",
          "aws-load-balancer-controller"
        ]
      },
      "environment_variables": [],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "referenced_by": "ArgoCD"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "application_load_balancer",
      "resource_type": "ELB",
      "resource_identifier": "${var.cluster_name}-alb",
      "file_path": "infrastructure/modules/eks/main.tf",
      "infrastructure_type": "Terraform",
      "description": "Application Load Balancer for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "load_balancer",
          "endpoint_pattern": "${var.cluster_name}-alb.${region}.elb.amazonaws.com",
          "operations": [
            "ForwardTraffic",
            "HealthCheck"
          ],
          "authentication": "None"
        }
      ],
      "configuration": {
        "load_balancer_type": "application",
        "internal": false,
        "deletion_protection": false
      },
      "security": {
        "security_group": "${var.cluster_name}-alb-sg",
        "ingress_rules": [
          {
            "from_port": 80,
            "to_port": 80,
            "protocol": "tcp",
            "cidr_blocks": ["0.0.0.0/0"]
          },
          {
            "from_port": 443,
            "to_port": 443,
            "protocol": "tcp",
            "cidr_blocks": ["0.0.0.0/0"]
          }
        ]
      },
      "environment_variables": [],
      "deployment_details": {
        "provisioned_by": "Terraform"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "cloudwatch_monitoring",
      "resource_type": "CloudWatch",
      "resource_identifier": "${prefix}-${environment}",
      "file_path": "infrastructure/modules/monitoring/main.tf",
      "infrastructure_type": "Terraform",
      "description": "CloudWatch monitoring for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "monitoring",
          "endpoint_pattern": "monitoring.${region}.amazonaws.com",
          "operations": [
            "PutMetricData",
            "GetMetricData",
            "PutDashboard"
          ],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "api_latency_threshold": "${var.api_latency_threshold}",
        "error_rate_threshold": "${var.error_rate_threshold}",
        "cpu_utilization_threshold": "${var.cpu_utilization_threshold}",
        "memory_utilization_threshold": "${var.memory_utilization_threshold}"
      },
      "security": {
        "access_policy": "IAM role-based with CloudWatch permissions",
        "policy_file": "infrastructure/modules/eks/policies/cloudwatch-policy.json"
      },
      "environment_variables": [],
      "deployment_details": {
        "provisioned_by": "Terraform",
        "container_insights_enabled": true
      },
      "provider_type": "internal"
    }
  ],
  "application_consumers": [
    {
      "consumer_id": "pet_service",
      "component_type": "service",
      "file_path": "backend/pet-service/server.js",
      "language": "JavaScript",
      "description": "Microservice that provides pet management functionality through REST API endpoints",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": [
          "AWS_REGION",
          "DYNAMODB_TABLE"
        ]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": [
          "${cluster_name}-node-role"
        ]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk",
        "clients": [
          "DynamoDB.DocumentClient"
        ]
      },
      "package_dependencies": [
        "aws-sdk",
        "express",
        "body-parser",
        "cors",
        "uuid",
        "winston"
      ],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "pet-hospital-pets",
          "file_path": "infrastructure/main.tf"
        }
      ],
      "external_dependencies": []
    },
    {
      "consumer_id": "hospital_service",
      "component_type": "service",
      "file_path": "backend/hospital-service/server.js",
      "language": "JavaScript",
      "description": "Microservice that provides hospital management functionality through REST API endpoints",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": [
          "AWS_REGION",
          "DYNAMODB_TABLE"
        ]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": [
          "${cluster_name}-node-role"
        ]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk",
        "clients": [
          "DynamoDB.DocumentClient"
        ]
      },
      "package_dependencies": [
        "aws-sdk",
        "express",
        "body-parser",
        "cors",
        "uuid",
        "winston"
      ],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "pet-hospital-hospitals",
          "file_path": "infrastructure/main.tf"
        }
      ],
      "external_dependencies": []
    },
    {
      "consumer_id": "doctor_service",
      "component_type": "service",
      "file_path": "backend/doctor-service/server.js",
      "language": "JavaScript",
      "description": "Microservice that provides doctor management functionality through REST API endpoints",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": [
          "AWS_REGION",
          "DYNAMODB_TABLE"
        ]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": [
          "${cluster_name}-node-role"
        ]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk",
        "clients": [
          "DynamoDB.DocumentClient"
        ]
      },
      "package_dependencies": [
        "aws-sdk",
        "express",
        "body-parser",
        "cors",
        "uuid",
        "winston"
      ],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "pet-hospital-doctors",
          "file_path": "infrastructure/main.tf"
        }
      ],
      "external_dependencies": []
    },
    {
      "consumer_id": "frontend_app",
      "component_type": "frontend",
      "file_path": "frontend/src/App.js",
      "language": "JavaScript",
      "description": "Frontend application that provides user interface for the pet hospital application",
      "resource_discovery": {
        "method": "API endpoints",
        "configuration_files": []
      },
      "authentication": {
        "method": "None - uses backend services"
      },
      "package_dependencies": [
        "react",
        "react-router-dom",
        "axios",
        "@mui/material"
      ],
      "internal_dependencies": [],
      "external_dependencies": []
    },
    {
      "consumer_id": "pets_frontend",
      "component_type": "module",
      "file_path": "frontend/src/pages/Pets.js",
      "language": "JavaScript",
      "description": "Component that provides UI for pet management including CRUD operations",
      "resource_discovery": {
        "method": "Hardcoded API path",
        "environment_variables": []
      },
      "authentication": {
        "method": "None - uses backend services"
      },
      "package_dependencies": [
        "react",
        "axios",
        "@mui/material"
      ],
      "internal_dependencies": [],
      "external_dependencies": []
    }
  ],
  "connections": [
    {
      "connection_id": "pet_service_dynamodb_get_all",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Pet service fetches all pets from DynamoDB table",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_dynamodb_get_single",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Pet service fetches a single pet by ID from DynamoDB table",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_dynamodb_create",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Pet service creates a new pet in DynamoDB table",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_dynamodb_update",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Pet service updates an existing pet in DynamoDB table",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_dynamodb_delete",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Pet service deletes a pet from DynamoDB table",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_get_all",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Hospital service fetches all hospitals from DynamoDB table",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_get_single",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Hospital service fetches a single hospital by ID from DynamoDB table",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_create",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Hospital service creates a new hospital in DynamoDB table",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_update",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Hospital service updates an existing hospital in DynamoDB table",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_delete",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Hospital service deletes a hospital from DynamoDB table",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_get_all",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Doctor service fetches all doctors from DynamoDB table",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_get_single",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Doctor service fetches a single doctor by ID from DynamoDB table",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_create",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Doctor service creates a new doctor in DynamoDB table",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_update",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Doctor service updates an existing doctor in DynamoDB table",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_delete",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Doctor service deletes a doctor from DynamoDB table",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_query_by_hospital",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Doctor service queries doctors by hospital ID using a filter expression",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "medium",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pets_frontend_api_get_all",
      "consumer_id": "pets_frontend",
      "provider_id": "pet_service",
      "provider_resource_type": "API",
      "operation": "GET",
      "access_type": "read",
      "description": "Frontend fetches all pets through the pet service API",
      "code_snippet": "const response = await axios.get(API_URL);",
      "source_file_path": "frontend/src/pages/Pets.js",
      "target_file_path": "backend/pet-service/server.js",
      "configuration_source": "hardcoded",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pets_frontend_api_create",
      "consumer_id": "pets_frontend",
      "provider_id": "pet_service",
      "provider_resource_type": "API",
      "operation": "POST",
      "access_type": "write",
      "description": "Frontend creates a new pet through the pet service API",
      "code_snippet": "await axios.post(API_URL, formData);",
      "source_file_path": "frontend/src/pages/Pets.js",
      "target_file_path": "backend/pet-service/server.js",
      "configuration_source": "hardcoded",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pets_frontend_api_update",
      "consumer_id": "pets_frontend",
      "provider_id": "pet_service",
      "provider_resource_type": "API",
      "operation": "PUT",
      "access_type": "write",
      "description": "Frontend updates an existing pet through the pet service API",
      "code_snippet": "await axios.put(`${API_URL}/${formData.id}`, formData);",
      "source_file_path": "frontend/src/pages/Pets.js",
      "target_file_path": "backend/pet-service/server.js",
      "configuration_source": "hardcoded",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pets_frontend_api_delete",
      "consumer_id": "pets_frontend",
      "provider_id": "pet_service",
      "provider_resource_type": "API",
      "operation": "DELETE",
      "access_type": "delete",
      "description": "Frontend deletes a pet through the pet service API",
      "code_snippet": "await axios.delete(`${API_URL}/${deleteId}`);",
      "source_file_path": "frontend/src/pages/Pets.js",
      "target_file_path": "backend/pet-service/server.js",
      "configuration_source": "hardcoded",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    }
  ],
  "architecture": {
    "application_type": "microservice",
    "infrastructure_pattern": "container-based",
    "deployment_approach": "CI/CD with ArgoCD and Kubernetes",
    "configuration_management": "Environment variables managed through Kubernetes manifests",
    "critical_paths": [
      {
        "path_name": "pet_management_flow",
        "description": "Complete flow from frontend to backend to database for pet management operations",
        "components": ["frontend_app", "pet_service", "pets_dynamodb_table"]
      },
      {
        "path_name": "hospital_management_flow",
        "description": "Complete flow from frontend to backend to database for hospital management operations",
        "components": ["frontend_app", "hospital_service", "hospitals_dynamodb_table"]
      },
      {
        "path_name": "doctor_management_flow",
        "description": "Complete flow from frontend to backend to database for doctor management operations",
        "components": ["frontend_app", "doctor_service", "doctors_dynamodb_table"]
      }
    ],
    "security_model": {
      "authentication": "IAM roles with least privilege permissions",
      "authorization": "IAM policies attached to EKS node role",
      "network": "Security groups and VPC isolation",
      "data_access": "DynamoDB fine-grained access control"
    },
    "cross_repo_dependencies": {
      "provides_to": [],
      "consumes_from": [],
      "shared_infrastructure": false
    }
  }
}