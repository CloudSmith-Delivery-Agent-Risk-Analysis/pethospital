{
  "org_name": "CloudSmith-Delivery-Agent-Risk-Analysis",
  "repo_name": "pethospital",
  "repo_url": "https://github.com/CloudSmith-Delivery-Agent-Risk-Analysis/pethospital",
  "infrastructure_providers": [
    {
      "provider_id": "dynamodb_pets_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${project_prefix}-pets",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores pet information for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "DeleteItem", "Scan", "Query", "UpdateItem"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_doctors_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${project_prefix}-doctors",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores doctor information for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "DeleteItem", "Scan", "Query", "UpdateItem"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_hospitals_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${project_prefix}-hospitals",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores hospital information for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "DeleteItem", "Scan", "Query", "UpdateItem"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_visits_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${project_prefix}-visits",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores visit information for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "DeleteItem", "Scan", "Query", "UpdateItem"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_billing_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${project_prefix}-billing",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores billing information for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "DeleteItem", "Scan", "Query", "UpdateItem"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_insurance_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${project_prefix}-insurance",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table that stores insurance information for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "DeleteItem", "Scan", "Query", "UpdateItem"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE"],
      "provider_type": "internal"
    },
    {
      "provider_id": "ecr_pet_service",
      "resource_type": "ECR",
      "resource_identifier": "${project_prefix}-pet-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing pet service container images",
      "interfaces": [
        {
          "interface_type": "container_registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${project_prefix}-pet-service",
          "operations": ["PushImage", "PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "scan_on_push": true,
        "lifecycle_policy": "Keep last 10 images"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "ecr_hospital_service",
      "resource_type": "ECR",
      "resource_identifier": "${project_prefix}-hospital-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing hospital service container images",
      "interfaces": [
        {
          "interface_type": "container_registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${project_prefix}-hospital-service",
          "operations": ["PushImage", "PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "scan_on_push": true,
        "lifecycle_policy": "Keep last 10 images"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "ecr_doctor_service",
      "resource_type": "ECR",
      "resource_identifier": "${project_prefix}-doctor-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing doctor service container images",
      "interfaces": [
        {
          "interface_type": "container_registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${project_prefix}-doctor-service",
          "operations": ["PushImage", "PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "scan_on_push": true,
        "lifecycle_policy": "Keep last 10 images"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "ecr_frontend",
      "resource_type": "ECR",
      "resource_identifier": "${project_prefix}-frontend",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing frontend container images",
      "interfaces": [
        {
          "interface_type": "container_registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${project_prefix}-frontend",
          "operations": ["PushImage", "PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "scan_on_push": true,
        "lifecycle_policy": "Keep last 10 images"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "eks_cluster",
      "resource_type": "EKS",
      "resource_identifier": "${project_prefix}-eks-cluster",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "EKS cluster that hosts the pet hospital microservices",
      "interfaces": [
        {
          "interface_type": "kubernetes",
          "endpoint_pattern": "https://${cluster_endpoint}",
          "operations": ["CreatePod", "DeletePod", "GetPod", "ListPods", "UpdatePod"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "cluster_version": "${kubernetes_version}",
        "endpoint_private_access": true,
        "endpoint_public_access": true,
        "enabled_cluster_log_types": ["api", "audit", "authenticator", "controllerManager", "scheduler"]
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "app_load_balancer",
      "resource_type": "ALB",
      "resource_identifier": "${cluster_name}-alb",
      "file_path": "infrastructure/modules/eks/main.tf",
      "infrastructure_type": "Terraform",
      "description": "Application Load Balancer for routing traffic to microservices in the EKS cluster",
      "interfaces": [
        {
          "interface_type": "http",
          "endpoint_pattern": "http://${lb_dns_name}",
          "operations": ["HandleHTTPRequest", "RouteTraffic"],
          "authentication": "None"
        }
      ],
      "configuration": {
        "load_balancer_type": "application",
        "internal": false,
        "deletion_protection": false,
        "security_groups": ["${security_group_id}"]
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "cloudwatch_dashboard",
      "resource_type": "CloudWatch",
      "resource_identifier": "${cluster_name}-dashboard",
      "file_path": "infrastructure/modules/monitoring/main.tf",
      "infrastructure_type": "Terraform",
      "description": "CloudWatch dashboard for monitoring the pet hospital application",
      "interfaces": [
        {
          "interface_type": "dashboard",
          "endpoint_pattern": "https://console.aws.amazon.com/cloudwatch/home?region=${region}#dashboards:name=${cluster_name}-dashboard",
          "operations": ["ViewDashboard"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "widgets": ["API Latency", "HTTP Errors", "Failed Nodes", "Pod Resource Utilization", "Node CPU Utilization", "Node Memory Utilization"]
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "api_latency_alarm",
      "resource_type": "CloudWatch",
      "resource_identifier": "${cluster_name}-api-latency",
      "file_path": "infrastructure/modules/monitoring/main.tf",
      "infrastructure_type": "Terraform",
      "description": "CloudWatch alarm for API latency exceeding threshold",
      "interfaces": [
        {
          "interface_type": "alarm",
          "endpoint_pattern": "https://console.aws.amazon.com/cloudwatch/home?region=${region}#alarmsV2:alarm/${cluster_name}-api-latency",
          "operations": ["GetAlarm", "DescribeAlarmHistory"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "comparison_operator": "GreaterThanThreshold",
        "evaluation_periods": 2,
        "metric_name": "TargetResponseTime",
        "namespace": "AWS/ApplicationELB",
        "period": 60,
        "statistic": "Average",
        "threshold": "${api_latency_threshold}"
      },
      "provider_type": "internal"
    }
  ],
  "application_consumers": [
    {
      "consumer_id": "pet_service",
      "component_type": "service",
      "file_path": "backend/pet-service/server.js",
      "language": "JavaScript",
      "description": "Backend microservice that handles CRUD operations for pet data",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["AWS_REGION", "DYNAMODB_TABLE"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_dynamodb_access"]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk-js",
        "clients": ["DynamoDB.DocumentClient"]
      },
      "package_dependencies": ["aws-sdk", "express", "body-parser", "cors", "uuid", "winston"],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${project_prefix}-pets",
          "file_path": "infrastructure/main.tf"
        }
      ]
    },
    {
      "consumer_id": "hospital_service",
      "component_type": "service",
      "file_path": "backend/hospital-service/server.js",
      "language": "JavaScript",
      "description": "Backend microservice that handles CRUD operations for hospital data",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["AWS_REGION", "DYNAMODB_TABLE"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_dynamodb_access"]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk-js",
        "clients": ["DynamoDB.DocumentClient"]
      },
      "package_dependencies": ["aws-sdk", "express", "body-parser", "cors", "uuid", "winston"],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${project_prefix}-hospitals",
          "file_path": "infrastructure/main.tf"
        }
      ]
    },
    {
      "consumer_id": "doctor_service",
      "component_type": "service",
      "file_path": "backend/doctor-service/server.js",
      "language": "JavaScript",
      "description": "Backend microservice that handles CRUD operations for doctor data",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["AWS_REGION", "DYNAMODB_TABLE"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_dynamodb_access"]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk-js",
        "clients": ["DynamoDB.DocumentClient"]
      },
      "package_dependencies": ["aws-sdk", "express", "body-parser", "cors", "uuid", "winston"],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${project_prefix}-doctors",
          "file_path": "infrastructure/main.tf"
        }
      ]
    },
    {
      "consumer_id": "frontend_app",
      "component_type": "application",
      "file_path": "frontend/src/pages/Pets.js",
      "language": "JavaScript",
      "description": "Frontend React application that provides user interface for the pet hospital system",
      "resource_discovery": {
        "method": "api endpoints",
        "configuration_files": []
      },
      "authentication": {
        "method": "None"
      },
      "package_dependencies": ["react", "react-router-dom", "@mui/material", "axios"],
      "internal_dependencies": []
    }
  ],
  "connections": [
    {
      "connection_id": "pet_service_scan_pets",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Retrieves all pets from the pets DynamoDB table",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_get_pet",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Retrieves a specific pet by ID from the pets DynamoDB table",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_put_pet",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Creates a new pet in the pets DynamoDB table",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_update_pet",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Updates an existing pet in the pets DynamoDB table",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_delete_pet",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Deletes a pet from the pets DynamoDB table",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_scan_hospitals",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Retrieves all hospitals from the hospitals DynamoDB table",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_get_hospital",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Retrieves a specific hospital by ID from the hospitals DynamoDB table",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_put_hospital",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Creates a new hospital in the hospitals DynamoDB table",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_update_hospital",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Updates an existing hospital in the hospitals DynamoDB table",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_delete_hospital",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Deletes a hospital from the hospitals DynamoDB table",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_scan_doctors",
      "consumer_id": "doctor_service",
      "provider_id": "dynamodb_doctors_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Retrieves all doctors from the doctors DynamoDB table",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_get_doctor",
      "consumer_id": "doctor_service",
      "provider_id": "dynamodb_doctors_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Retrieves a specific doctor by ID from the doctors DynamoDB table",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_put_doctor",
      "consumer_id": "doctor_service",
      "provider_id": "dynamodb_doctors_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Creates a new doctor in the doctors DynamoDB table",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_update_doctor",
      "consumer_id": "doctor_service",
      "provider_id": "dynamodb_doctors_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Updates an existing doctor in the doctors DynamoDB table",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_delete_doctor",
      "consumer_id": "doctor_service",
      "provider_id": "dynamodb_doctors_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Deletes a doctor from the doctors DynamoDB table",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_scan_by_hospital",
      "consumer_id": "doctor_service",
      "provider_id": "dynamodb_doctors_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Retrieves doctors filtered by hospital ID",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "frontend_api_pets",
      "consumer_id": "frontend_app",
      "provider_id": "app_load_balancer",
      "provider_resource_type": "ALB",
      "operation": "HTTP",
      "access_type": "read",
      "description": "Frontend application makes HTTP requests to the pet service API through the load balancer",
      "code_snippet": "const response = await axios.get(API_URL);",
      "source_file_path": "frontend/src/pages/Pets.js",
      "target_file_path": "infrastructure/modules/eks/main.tf",
      "configuration_source": "hardcoded",
      "criticality": "high",
      "connection_type": "indirect",
      "cross_repo": false
    }
  ],
  "architecture": {
    "application_type": "microservice",
    "infrastructure_pattern": "container-based",
    "deployment_approach": "CI/CD with ArgoCD",
    "configuration_management": "environment variables and Kubernetes ConfigMaps",
    "critical_paths": [
      {
        "path_name": "frontend_to_backend_services",
        "description": "Frontend application connects to backend services via ALB",
        "involved_components": ["frontend_app", "app_load_balancer", "pet_service", "doctor_service", "hospital_service"]
      },
      {
        "path_name": "microservices_to_dynamodb",
        "description": "Backend microservices connect to their respective DynamoDB tables",
        "involved_components": ["pet_service", "doctor_service", "hospital_service", "dynamodb_pets_table", "dynamodb_doctors_table", "dynamodb_hospitals_table"]
      }
    ],
    "security_model": {
      "authentication": "IAM roles with least privilege permissions",
      "authorization": "Resource-based policies for DynamoDB access",
      "data_protection": "HTTPS for frontend to backend communication"
    },
    "cross_repo_dependencies": {
      "provides_to": [],
      "consumes_from": [],
      "shared_infrastructure": false
    }
  }
}