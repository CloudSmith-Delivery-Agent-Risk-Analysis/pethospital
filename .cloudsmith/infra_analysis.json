{
  "org_name": "CloudSmith-Delivery-Agent-Risk-Analysis",
  "repo_name": "pethospital",
  "repo_url": "https://github.com/CloudSmith-Delivery-Agent-Risk-Analysis/pethospital",
  "infrastructure_providers": [
    {
      "provider_id": "pets_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-pets",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table storing pet data for the pet management service",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com/table/${prefix}-pets",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "attributes": [
          {
            "name": "id",
            "type": "S"
          }
        ],
        "point_in_time_recovery": true
      },
      "security": {
        "access_control": "IAM role-based access through EKS node role"
      },
      "environment_variables": ["DYNAMODB_TABLE=pet-hospital-pets"],
      "provider_type": "internal"
    },
    {
      "provider_id": "hospitals_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-hospitals",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table storing hospital data for the hospital management service",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com/table/${prefix}-hospitals",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "attributes": [
          {
            "name": "id",
            "type": "S"
          }
        ],
        "point_in_time_recovery": true
      },
      "security": {
        "access_control": "IAM role-based access through EKS node role"
      },
      "environment_variables": ["DYNAMODB_TABLE=pet-hospital-hospitals"],
      "provider_type": "internal"
    },
    {
      "provider_id": "doctors_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-doctors",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table storing doctor data for the doctor management service",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com/table/${prefix}-doctors",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "attributes": [
          {
            "name": "id",
            "type": "S"
          }
        ],
        "point_in_time_recovery": true
      },
      "security": {
        "access_control": "IAM role-based access through EKS node role"
      },
      "environment_variables": ["DYNAMODB_TABLE=pet-hospital-doctors"],
      "provider_type": "internal"
    },
    {
      "provider_id": "visits_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-visits",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table storing visit data for pet hospital visits",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com/table/${prefix}-visits",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "attributes": [
          {
            "name": "id",
            "type": "S"
          }
        ],
        "point_in_time_recovery": true
      },
      "security": {
        "access_control": "IAM role-based access through EKS node role"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "billing_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-billing",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table storing billing data for pet hospital services",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com/table/${prefix}-billing",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "attributes": [
          {
            "name": "id",
            "type": "S"
          }
        ],
        "point_in_time_recovery": true
      },
      "security": {
        "access_control": "IAM role-based access through EKS node role"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "insurance_dynamodb_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-insurance",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table storing pet insurance data",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com/table/${prefix}-insurance",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "attributes": [
          {
            "name": "id",
            "type": "S"
          }
        ],
        "point_in_time_recovery": true
      },
      "security": {
        "access_control": "IAM role-based access through EKS node role"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "pet_service_ecr",
      "resource_type": "ECR",
      "resource_identifier": "${prefix}-pet-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing pet service Docker images",
      "interfaces": [
        {
          "interface_type": "registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${prefix}-pet-service",
          "operations": ["PushImage", "PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "scan_on_push": true
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "hospital_service_ecr",
      "resource_type": "ECR",
      "resource_identifier": "${prefix}-hospital-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing hospital service Docker images",
      "interfaces": [
        {
          "interface_type": "registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${prefix}-hospital-service",
          "operations": ["PushImage", "PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "scan_on_push": true
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "doctor_service_ecr",
      "resource_type": "ECR",
      "resource_identifier": "${prefix}-doctor-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing doctor service Docker images",
      "interfaces": [
        {
          "interface_type": "registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${prefix}-doctor-service",
          "operations": ["PushImage", "PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "scan_on_push": true
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "frontend_ecr",
      "resource_type": "ECR",
      "resource_identifier": "${prefix}-frontend",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing frontend application Docker images",
      "interfaces": [
        {
          "interface_type": "registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${prefix}-frontend",
          "operations": ["PushImage", "PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE",
        "scan_on_push": true
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "eks_cluster",
      "resource_type": "EKS",
      "resource_identifier": "${prefix}-eks-cluster",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "Kubernetes cluster for running the pet hospital microservices",
      "interfaces": [
        {
          "interface_type": "api",
          "endpoint_pattern": "${cluster_endpoint}",
          "operations": ["CreatePod", "DeletePod", "GetPod", "ListPods"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "kubernetes_version": "${kubernetes_version}",
        "endpoint_private_access": true,
        "endpoint_public_access": true,
        "enabled_cluster_log_types": ["api", "audit", "authenticator", "controllerManager", "scheduler"]
      },
      "security": {
        "cluster_role_arn": "${cluster_role_arn}",
        "node_role_arn": "${node_role_arn}"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "pethospital_alb",
      "resource_type": "ApplicationLoadBalancer",
      "resource_identifier": "${cluster_name}-alb",
      "file_path": "infrastructure/modules/eks/main.tf",
      "infrastructure_type": "Terraform",
      "description": "Application Load Balancer for routing external traffic to the application services",
      "interfaces": [
        {
          "interface_type": "loadbalancer",
          "endpoint_pattern": "${cluster_name}-alb.${region}.elb.amazonaws.com",
          "operations": ["RouteTraffic"],
          "authentication": "None"
        }
      ],
      "configuration": {
        "load_balancer_type": "application",
        "internal": false,
        "enable_deletion_protection": false
      },
      "security": {
        "security_groups": ["${cluster_name}-alb-sg"]
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "cloudwatch_dashboard",
      "resource_type": "CloudWatchDashboard",
      "resource_identifier": "${cluster_name}-dashboard",
      "file_path": "infrastructure/modules/monitoring/main.tf",
      "infrastructure_type": "Terraform",
      "description": "CloudWatch dashboard for monitoring the pet hospital application",
      "interfaces": [
        {
          "interface_type": "monitoring",
          "endpoint_pattern": "https://console.aws.amazon.com/cloudwatch/home?region=${region}#dashboards:name=${cluster_name}-dashboard",
          "operations": ["ViewMetrics"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "widgets": [
          "API Latency",
          "HTTP Errors",
          "Failed Nodes",
          "Pod Resource Utilization",
          "Node CPU Utilization",
          "Node Memory Utilization"
        ]
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "api_latency_alarm",
      "resource_type": "CloudWatchAlarm",
      "resource_identifier": "${cluster_name}-api-latency",
      "file_path": "infrastructure/modules/monitoring/main.tf",
      "infrastructure_type": "Terraform",
      "description": "CloudWatch alarm for monitoring API latency",
      "interfaces": [
        {
          "interface_type": "alarm",
          "endpoint_pattern": "cloudwatch:${region}:${account_id}:alarm:${cluster_name}-api-latency",
          "operations": ["TriggerAlarm"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "comparison_operator": "GreaterThanThreshold",
        "evaluation_periods": 2,
        "metric_name": "TargetResponseTime",
        "namespace": "AWS/ApplicationELB",
        "period": 60,
        "statistic": "Average",
        "threshold": "${api_latency_threshold}/1000"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "error_rate_alarm",
      "resource_type": "CloudWatchAlarm",
      "resource_identifier": "${cluster_name}-error-rate",
      "file_path": "infrastructure/modules/monitoring/main.tf",
      "infrastructure_type": "Terraform",
      "description": "CloudWatch alarm for monitoring API error rate",
      "interfaces": [
        {
          "interface_type": "alarm",
          "endpoint_pattern": "cloudwatch:${region}:${account_id}:alarm:${cluster_name}-error-rate",
          "operations": ["TriggerAlarm"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "comparison_operator": "GreaterThanThreshold",
        "evaluation_periods": 2,
        "metric_name": "HTTPCode_Target_5XX_Count",
        "namespace": "AWS/ApplicationELB",
        "period": 60,
        "statistic": "Sum",
        "threshold": "${error_rate_threshold}"
      },
      "provider_type": "internal"
    }
  ],
  "application_consumers": [
    {
      "consumer_id": "pet_service",
      "component_type": "service",
      "file_path": "backend/pet-service/server.js",
      "language": "JavaScript",
      "description": "Microservice for managing pet information, performs CRUD operations on pets DynamoDB table",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["DYNAMODB_TABLE", "AWS_REGION"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_dynamodb_access"]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk",
        "clients": ["DynamoDB.DocumentClient"]
      },
      "package_dependencies": ["aws-sdk", "express", "body-parser", "cors", "uuid", "winston"],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-pets",
          "file_path": "infrastructure/main.tf"
        }
      ],
      "external_dependencies": []
    },
    {
      "consumer_id": "doctor_service",
      "component_type": "service",
      "file_path": "backend/doctor-service/server.js",
      "language": "JavaScript",
      "description": "Microservice for managing doctor information, performs CRUD operations on doctors DynamoDB table",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["DYNAMODB_TABLE", "AWS_REGION"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_dynamodb_access"]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk",
        "clients": ["DynamoDB.DocumentClient"]
      },
      "package_dependencies": ["aws-sdk", "express", "body-parser", "cors", "uuid", "winston"],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-doctors",
          "file_path": "infrastructure/main.tf"
        }
      ],
      "external_dependencies": []
    },
    {
      "consumer_id": "hospital_service",
      "component_type": "service",
      "file_path": "backend/hospital-service/server.js",
      "language": "JavaScript",
      "description": "Microservice for managing hospital information, performs CRUD operations on hospitals DynamoDB table",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["DYNAMODB_TABLE", "AWS_REGION"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_dynamodb_access"]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk",
        "clients": ["DynamoDB.DocumentClient"]
      },
      "package_dependencies": ["aws-sdk", "express", "body-parser", "cors", "uuid", "winston"],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-hospitals",
          "file_path": "infrastructure/main.tf"
        }
      ],
      "external_dependencies": []
    },
    {
      "consumer_id": "frontend_app",
      "component_type": "application",
      "file_path": "frontend/src/pages/Pets.js",
      "language": "JavaScript",
      "description": "Frontend React application that interacts with backend services to display and manage pet hospital data",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["API_URL"]
      },
      "authentication": {
        "method": "None"
      },
      "package_dependencies": ["react", "axios", "material-ui"],
      "internal_dependencies": [],
      "external_dependencies": []
    },
    {
      "consumer_id": "cloudwatch_container_insights",
      "component_type": "monitoring",
      "file_path": "infrastructure/modules/eks/main.tf",
      "language": "Terraform",
      "description": "CloudWatch Container Insights deployed to EKS cluster for monitoring container metrics",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["ClusterName", "RegionName"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_cloudwatch_access"]
      },
      "package_dependencies": [],
      "internal_dependencies": [
        {
          "resource_type": "CloudWatchDashboard",
          "resource_name": "${cluster_name}-dashboard",
          "file_path": "infrastructure/modules/monitoring/main.tf"
        },
        {
          "resource_type": "CloudWatchAlarm",
          "resource_name": "${cluster_name}-api-latency",
          "file_path": "infrastructure/modules/monitoring/main.tf"
        },
        {
          "resource_type": "CloudWatchAlarm",
          "resource_name": "${cluster_name}-error-rate",
          "file_path": "infrastructure/modules/monitoring/main.tf"
        }
      ],
      "external_dependencies": []
    }
  ],
  "connections": [
    {
      "connection_id": "pet_service_dynamodb_scan",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Pet service fetches all pets from DynamoDB",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_dynamodb_get",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Pet service fetches a specific pet by ID from DynamoDB",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_dynamodb_put",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Pet service creates a new pet record in DynamoDB",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_dynamodb_update",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Pet service updates an existing pet record in DynamoDB",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_dynamodb_delete",
      "consumer_id": "pet_service",
      "provider_id": "pets_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Pet service deletes a pet record from DynamoDB",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_scan",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Doctor service fetches all doctors from DynamoDB",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_get",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Doctor service fetches a specific doctor by ID from DynamoDB",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_put",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Doctor service creates a new doctor record in DynamoDB",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_update",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Doctor service updates an existing doctor record in DynamoDB",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_delete",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Doctor service deletes a doctor record from DynamoDB",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "doctor_service_dynamodb_filter_by_hospital",
      "consumer_id": "doctor_service",
      "provider_id": "doctors_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Doctor service fetches doctors filtered by hospital ID from DynamoDB",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/doctor-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_scan",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Hospital service fetches all hospitals from DynamoDB",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_get",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Hospital service fetches a specific hospital by ID from DynamoDB",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_put",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Hospital service creates a new hospital record in DynamoDB",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_update",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Hospital service updates an existing hospital record in DynamoDB",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_dynamodb_delete",
      "consumer_id": "hospital_service",
      "provider_id": "hospitals_dynamodb_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Hospital service deletes a hospital record from DynamoDB",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "container_insights_cloudwatch_metric",
      "consumer_id": "cloudwatch_container_insights",
      "provider_id": "cloudwatch_dashboard",
      "provider_resource_type": "CloudWatchDashboard",
      "operation": "PutMetricData",
      "access_type": "write",
      "description": "Container Insights publishes container metrics to CloudWatch",
      "code_snippet": "curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluentd-quickstart.yaml",
      "source_file_path": "infrastructure/modules/eks/main.tf",
      "target_file_path": "infrastructure/modules/monitoring/main.tf",
      "configuration_source": "environment variable",
      "criticality": "medium",
      "connection_type": "direct",
      "cross_repo": false
    }
  ],
  "architecture": {
    "application_type": "microservice",
    "infrastructure_pattern": "container-based",
    "deployment_approach": "CI/CD with ArgoCD",
    "configuration_management": "environment variables and Kubernetes manifests",
    "critical_paths": [
      {
        "path_name": "pet_management",
        "description": "Critical path for pet data access and management",
        "components": ["frontend_app", "pet_service", "pets_dynamodb_table"]
      },
      {
        "path_name": "doctor_management",
        "description": "Critical path for doctor data access and management",
        "components": ["frontend_app", "doctor_service", "doctors_dynamodb_table"]
      },
      {
        "path_name": "hospital_management",
        "description": "Critical path for hospital data access and management",
        "components": ["frontend_app", "hospital_service", "hospitals_dynamodb_table"]
      }
    ],
    "security_model": {
      "authentication": "IAM roles for service accounts",
      "authorization": "IAM policies attached to roles",
      "encryption": "DynamoDB default encryption",
      "network_security": "Security groups and VPC configuration"
    },
    "cross_repo_dependencies": {
      "provides_to": [],
      "consumes_from": [],
      "shared_infrastructure": false
    }
  }
}