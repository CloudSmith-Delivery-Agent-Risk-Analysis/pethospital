{
  "org_name": "CloudSmith-Delivery-Agent-Risk-Analysis",
  "repo_name": "pethospital",
  "repo_url": "https://github.com/CloudSmith-Delivery-Agent-Risk-Analysis/pethospital",
  "infrastructure_providers": [
    {
      "provider_id": "dynamodb_pets_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-pets",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table for storing pet data in the pet hospital management system",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE=pet-hospital-pets"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_hospitals_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-hospitals",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table for storing hospital data in the pet hospital management system",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE=pet-hospital-hospitals"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_doctors_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-doctors",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table for storing doctor data in the pet hospital management system",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE=pet-hospital-doctors"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_visits_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-visits",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table for storing visit records in the pet hospital management system",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE=pet-hospital-visits"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_billing_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-billing",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table for storing billing information in the pet hospital management system",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE=pet-hospital-billing"],
      "provider_type": "internal"
    },
    {
      "provider_id": "dynamodb_insurance_table",
      "resource_type": "DynamoDB",
      "resource_identifier": "${prefix}-insurance",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "DynamoDB table for storing insurance information in the pet hospital management system",
      "interfaces": [
        {
          "interface_type": "database",
          "endpoint_pattern": "dynamodb.${region}.amazonaws.com",
          "operations": ["GetItem", "PutItem", "UpdateItem", "DeleteItem", "Scan", "Query"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "billing_mode": "PAY_PER_REQUEST",
        "hash_key": "id",
        "point_in_time_recovery": true
      },
      "environment_variables": ["DYNAMODB_TABLE=pet-hospital-insurance"],
      "provider_type": "internal"
    },
    {
      "provider_id": "ecr_pet_service",
      "resource_type": "ECR",
      "resource_identifier": "${prefix}-pet-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing pet service container images",
      "interfaces": [
        {
          "interface_type": "container-registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${prefix}-pet-service",
          "operations": ["PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "ecr_hospital_service",
      "resource_type": "ECR",
      "resource_identifier": "${prefix}-hospital-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing hospital service container images",
      "interfaces": [
        {
          "interface_type": "container-registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${prefix}-hospital-service",
          "operations": ["PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "ecr_doctor_service",
      "resource_type": "ECR",
      "resource_identifier": "${prefix}-doctor-service",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing doctor service container images",
      "interfaces": [
        {
          "interface_type": "container-registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${prefix}-doctor-service",
          "operations": ["PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "ecr_frontend",
      "resource_type": "ECR",
      "resource_identifier": "${prefix}-frontend",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "ECR repository for storing frontend application container images",
      "interfaces": [
        {
          "interface_type": "container-registry",
          "endpoint_pattern": "${account_id}.dkr.ecr.${region}.amazonaws.com/${prefix}-frontend",
          "operations": ["PullImage"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "image_tag_mutability": "MUTABLE"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "eks_cluster",
      "resource_type": "EKS",
      "resource_identifier": "${prefix}-eks-cluster",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "EKS cluster for running the pet hospital microservices",
      "interfaces": [
        {
          "interface_type": "api",
          "endpoint_pattern": "${cluster_endpoint}",
          "operations": ["CreatePod", "CreateService", "CreateDeployment"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "kubernetes_version": "var.kubernetes_version",
        "endpoint_private_access": true,
        "endpoint_public_access": true,
        "enabled_cluster_log_types": ["api", "audit", "authenticator", "controllerManager", "scheduler"]
      },
      "security": {
        "iam_roles": ["cluster_role", "node_role", "aws_load_balancer_controller_role"],
        "policies": ["AmazonEKSClusterPolicy", "AmazonEKSVPCResourceController", "node_dynamodb_access", "node_cloudwatch_access"]
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "cloudwatch_monitoring",
      "resource_type": "CloudWatch",
      "resource_identifier": "${prefix}-monitoring",
      "file_path": "infrastructure/modules/monitoring/main.tf",
      "infrastructure_type": "Terraform",
      "description": "CloudWatch monitoring setup for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "logs",
          "endpoint_pattern": "logs.${region}.amazonaws.com",
          "operations": ["PutLogEvents", "CreateLogGroup", "CreateLogStream"],
          "authentication": "IAM"
        },
        {
          "interface_type": "metrics",
          "endpoint_pattern": "monitoring.${region}.amazonaws.com",
          "operations": ["PutMetricData", "GetMetricData"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "api_latency_threshold": "var.api_latency_threshold",
        "error_rate_threshold": "var.error_rate_threshold",
        "cpu_utilization_threshold": "var.cpu_utilization_threshold",
        "memory_utilization_threshold": "var.memory_utilization_threshold"
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "alb_controller",
      "resource_type": "ALB",
      "resource_identifier": "${prefix}-eks-cluster-alb",
      "file_path": "infrastructure/modules/eks/main.tf",
      "infrastructure_type": "Terraform",
      "description": "Application Load Balancer for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "loadbalancer",
          "endpoint_pattern": "${alb_hostname}",
          "operations": ["ForwardTraffic"],
          "authentication": "None"
        }
      ],
      "configuration": {
        "load_balancer_type": "application",
        "internal": false,
        "enable_deletion_protection": false
      },
      "provider_type": "internal"
    },
    {
      "provider_id": "vpc_network",
      "resource_type": "VPC",
      "resource_identifier": "${prefix}-vpc",
      "file_path": "infrastructure/main.tf",
      "infrastructure_type": "Terraform",
      "description": "VPC network for the pet hospital application",
      "interfaces": [
        {
          "interface_type": "network",
          "endpoint_pattern": "N/A",
          "operations": ["CreateSubnet", "RouteTraffic"],
          "authentication": "IAM"
        }
      ],
      "configuration": {
        "cidr": "var.vpc_cidr",
        "azs": "var.availability_zones",
        "private_subnets": "var.private_subnets",
        "public_subnets": "var.public_subnets",
        "enable_nat_gateway": true,
        "single_nat_gateway": true,
        "enable_dns_hostnames": true
      },
      "provider_type": "internal"
    }
  ],
  "application_consumers": [
    {
      "consumer_id": "pet_service",
      "component_type": "service",
      "file_path": "backend/pet-service/server.js",
      "language": "JavaScript",
      "description": "Microservice that handles pet management operations including CRUD operations on the pets table",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["AWS_REGION", "DYNAMODB_TABLE"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_role"]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk",
        "clients": ["DynamoDB.DocumentClient"]
      },
      "package_dependencies": ["aws-sdk", "express", "body-parser", "cors", "uuid", "winston"],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-pets",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "CloudWatch",
          "resource_name": "${prefix}-monitoring",
          "file_path": "infrastructure/modules/monitoring/main.tf"
        }
      ]
    },
    {
      "consumer_id": "hospital_service",
      "component_type": "service",
      "file_path": "backend/hospital-service/server.js",
      "language": "JavaScript",
      "description": "Microservice that handles hospital management operations including CRUD operations on the hospitals table",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["AWS_REGION", "DYNAMODB_TABLE"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_role"]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk",
        "clients": ["DynamoDB.DocumentClient"]
      },
      "package_dependencies": ["aws-sdk", "express", "body-parser", "cors", "uuid", "winston"],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-hospitals",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "CloudWatch",
          "resource_name": "${prefix}-monitoring",
          "file_path": "infrastructure/modules/monitoring/main.tf"
        }
      ]
    },
    {
      "consumer_id": "doctor_service",
      "component_type": "service",
      "file_path": "backend/doctor-service/server.js",
      "language": "JavaScript",
      "description": "Microservice that handles doctor management operations including CRUD operations on the doctors table",
      "resource_discovery": {
        "method": "environment variables",
        "environment_variables": ["AWS_REGION", "DYNAMODB_TABLE"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_role"]
      },
      "sdk_usage": {
        "sdk_type": "aws-sdk",
        "clients": ["DynamoDB.DocumentClient"]
      },
      "package_dependencies": ["aws-sdk", "express", "body-parser", "cors", "uuid", "winston"],
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-doctors",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "CloudWatch",
          "resource_name": "${prefix}-monitoring",
          "file_path": "infrastructure/modules/monitoring/main.tf"
        }
      ]
    },
    {
      "consumer_id": "frontend_app",
      "component_type": "application",
      "file_path": "frontend/src/App.js",
      "language": "JavaScript",
      "description": "React frontend application that interacts with the backend microservices via API calls",
      "resource_discovery": {
        "method": "configuration",
        "configuration_files": ["frontend/src/pages/Pets.js", "frontend/src/pages/Hospitals.js", "frontend/src/pages/Doctors.js"]
      },
      "authentication": {
        "method": "None (API Gateway/ALB handles authentication)"
      },
      "package_dependencies": ["react", "axios", "@mui/material", "react-router-dom"],
      "internal_dependencies": [
        {
          "resource_type": "ALB",
          "resource_name": "${prefix}-eks-cluster-alb",
          "file_path": "infrastructure/modules/eks/main.tf"
        }
      ]
    },
    {
      "consumer_id": "eks_node_group",
      "component_type": "infrastructure",
      "file_path": "infrastructure/main.tf",
      "language": "HCL",
      "description": "EKS node group that runs the containerized microservices and requires access to DynamoDB and CloudWatch",
      "resource_discovery": {
        "method": "IAM policies",
        "configuration_files": ["infrastructure/modules/eks/policies/dynamodb-policy.json", "infrastructure/modules/eks/policies/cloudwatch-policy.json"]
      },
      "authentication": {
        "method": "IAM role",
        "role_references": ["node_role"]
      },
      "internal_dependencies": [
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-pets",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-hospitals",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-doctors",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-visits",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-billing",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "DynamoDB",
          "resource_name": "${prefix}-insurance",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "CloudWatch",
          "resource_name": "${prefix}-monitoring",
          "file_path": "infrastructure/modules/monitoring/main.tf"
        },
        {
          "resource_type": "ECR",
          "resource_name": "${prefix}-pet-service",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "ECR",
          "resource_name": "${prefix}-hospital-service",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "ECR",
          "resource_name": "${prefix}-doctor-service",
          "file_path": "infrastructure/main.tf"
        },
        {
          "resource_type": "ECR",
          "resource_name": "${prefix}-frontend",
          "file_path": "infrastructure/main.tf"
        }
      ]
    }
  ],
  "connections": [
    {
      "connection_id": "pet_service_scan_dynamodb",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Pet service retrieves all pet records from the DynamoDB pets table",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_get_dynamodb",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Pet service retrieves a specific pet record by ID from the DynamoDB pets table",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_put_dynamodb",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Pet service creates a new pet record in the DynamoDB pets table",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_update_dynamodb",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Pet service updates an existing pet record in the DynamoDB pets table",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_delete_dynamodb",
      "consumer_id": "pet_service",
      "provider_id": "dynamodb_pets_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Pet service deletes a pet record from the DynamoDB pets table",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_scan_dynamodb",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "scan",
      "access_type": "read",
      "description": "Hospital service retrieves all hospital records from the DynamoDB hospitals table",
      "code_snippet": "const result = await dynamoDB.scan(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_get_dynamodb",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "get",
      "access_type": "read",
      "description": "Hospital service retrieves a specific hospital record by ID from the DynamoDB hospitals table",
      "code_snippet": "const result = await dynamoDB.get(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_put_dynamodb",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "put",
      "access_type": "write",
      "description": "Hospital service creates a new hospital record in the DynamoDB hospitals table",
      "code_snippet": "await dynamoDB.put(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_update_dynamodb",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "update",
      "access_type": "write",
      "description": "Hospital service updates an existing hospital record in the DynamoDB hospitals table",
      "code_snippet": "const result = await dynamoDB.update(updateParams).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_delete_dynamodb",
      "consumer_id": "hospital_service",
      "provider_id": "dynamodb_hospitals_table",
      "provider_resource_type": "DynamoDB",
      "operation": "delete",
      "access_type": "delete",
      "description": "Hospital service deletes a hospital record from the DynamoDB hospitals table",
      "code_snippet": "const result = await dynamoDB.delete(params).promise();",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "environment variable",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "frontend_pet_api",
      "consumer_id": "frontend_app",
      "provider_id": "alb_controller",
      "provider_resource_type": "ALB",
      "operation": "http_request",
      "access_type": "read",
      "description": "Frontend application makes HTTP requests to the pet service API via the ALB",
      "code_snippet": "const response = await axios.get(API_URL);",
      "source_file_path": "frontend/src/pages/Pets.js",
      "target_file_path": "infrastructure/modules/eks/main.tf",
      "configuration_source": "configuration",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "eks_pull_ecr_images",
      "consumer_id": "eks_node_group",
      "provider_id": "ecr_pet_service",
      "provider_resource_type": "ECR",
      "operation": "PullImage",
      "access_type": "read",
      "description": "EKS nodes pull container images from ECR for deployment",
      "code_snippet": "image: 304930966996.dkr.ecr.us-west-2.amazonaws.com/pet-hospital-pet-service:1656dde5264f849e2fe758f01ceab719fa7f0e33",
      "source_file_path": "k8s/base/pet-service.yaml",
      "target_file_path": "infrastructure/main.tf",
      "configuration_source": "kubernetes manifest",
      "criticality": "high",
      "connection_type": "direct",
      "cross_repo": false
    },
    {
      "connection_id": "pet_service_logs_cloudwatch",
      "consumer_id": "pet_service",
      "provider_id": "cloudwatch_monitoring",
      "provider_resource_type": "CloudWatch",
      "operation": "PutLogEvents",
      "access_type": "write",
      "description": "Pet service logs application events to CloudWatch via Winston logger",
      "code_snippet": "logger.info({ method: req.method, path: req.path, statusCode: res.statusCode, duration: `${duration}ms` });",
      "source_file_path": "backend/pet-service/server.js",
      "target_file_path": "infrastructure/modules/monitoring/main.tf",
      "configuration_source": "environment variable",
      "criticality": "medium",
      "connection_type": "indirect",
      "cross_repo": false
    },
    {
      "connection_id": "hospital_service_logs_cloudwatch",
      "consumer_id": "hospital_service",
      "provider_id": "cloudwatch_monitoring",
      "provider_resource_type": "CloudWatch",
      "operation": "PutLogEvents",
      "access_type": "write",
      "description": "Hospital service logs application events to CloudWatch via Winston logger",
      "code_snippet": "logger.info({ method: req.method, path: req.path, statusCode: res.statusCode, duration: `${duration}ms` });",
      "source_file_path": "backend/hospital-service/server.js",
      "target_file_path": "infrastructure/modules/monitoring/main.tf",
      "configuration_source": "environment variable",
      "criticality": "medium",
      "connection_type": "indirect",
      "cross_repo": false
    }
  ],
  "architecture": {
    "application_type": "microservice",
    "infrastructure_pattern": "container-based",
    "deployment_approach": "CI/CD with ArgoCD",
    "configuration_management": "Kubernetes ConfigMaps and environment variables",
    "critical_paths": [
      {
        "path_name": "user_pet_management",
        "description": "Frontend to Pet Service to DynamoDB flow for managing pet data",
        "involved_components": ["frontend_app", "alb_controller", "pet_service", "dynamodb_pets_table"]
      },
      {
        "path_name": "user_hospital_management",
        "description": "Frontend to Hospital Service to DynamoDB flow for managing hospital data",
        "involved_components": ["frontend_app", "alb_controller", "hospital_service", "dynamodb_hospitals_table"]
      }
    ],
    "security_model": {
      "authentication": "IAM roles with least privilege access",
      "authorization": "Service-level authorization through EKS RBAC",
      "data_protection": "DynamoDB point-in-time recovery and VPC isolation"
    },
    "cross_repo_dependencies": {
      "provides_to": [],
      "consumes_from": [],
      "shared_infrastructure": false
    }
  }
}