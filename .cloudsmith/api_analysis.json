{
  "org_name": "CloudSmith-Delivery-Agent-Risk-Analysis",
  "repo_name": "pethospital",
  "repo_url": "https://github.com/CloudSmith-Delivery-Agent-Risk-Analysis/pethospital",
  "provided_apis": [
    {
      "type": "rest",
      "endpoint": "/doctors",
      "method": "GET",
      "service_name": "DoctorService",
      "description": "Retrieves a list of all doctors",
      "file_path": "backend/doctor-service/server.js",
      "responses": {
        "200": {
          "description": "Returns an array of doctor objects",
          "content_type": "application/json"
        },
        "500": {
          "description": "Server error while fetching doctors",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/doctors/{id}",
      "method": "GET",
      "service_name": "DoctorService",
      "description": "Retrieves details of a specific doctor by ID",
      "file_path": "backend/doctor-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the doctor"
          }
        ]
      },
      "responses": {
        "200": {
          "description": "Returns the doctor object matching the provided ID",
          "content_type": "application/json"
        },
        "404": {
          "description": "Doctor not found",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while fetching doctor",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/doctors",
      "method": "POST",
      "service_name": "DoctorService",
      "description": "Creates a new doctor",
      "file_path": "backend/doctor-service/server.js",
      "parameters": {
        "body": {
          "type": "object",
          "required": true,
          "description": "Doctor information to be created",
          "properties": {
            "firstName": {
              "type": "string",
              "required": true,
              "description": "First name of the doctor"
            },
            "lastName": {
              "type": "string",
              "required": true,
              "description": "Last name of the doctor"
            },
            "specialization": {
              "type": "string",
              "required": true,
              "description": "Medical specialization of the doctor"
            },
            "hospitalId": {
              "type": "string",
              "required": true,
              "description": "ID of the hospital the doctor works at"
            },
            "email": {
              "type": "string",
              "required": false,
              "description": "Email address of the doctor"
            },
            "phone": {
              "type": "string",
              "required": false,
              "description": "Phone number of the doctor"
            },
            "licenseNumber": {
              "type": "string",
              "required": true,
              "description": "Medical license number of the doctor"
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Doctor created successfully",
          "content_type": "application/json"
        },
        "400": {
          "description": "Bad request - missing required fields",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while creating doctor",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/doctors/{id}",
      "method": "PUT",
      "service_name": "DoctorService",
      "description": "Updates details of an existing doctor",
      "file_path": "backend/doctor-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the doctor"
          }
        ],
        "body": {
          "type": "object",
          "required": true,
          "description": "Doctor information to be updated",
          "properties": {
            "firstName": {
              "type": "string",
              "required": false,
              "description": "First name of the doctor"
            },
            "lastName": {
              "type": "string",
              "required": false,
              "description": "Last name of the doctor"
            },
            "specialization": {
              "type": "string",
              "required": false,
              "description": "Medical specialization of the doctor"
            },
            "hospitalId": {
              "type": "string",
              "required": false,
              "description": "ID of the hospital the doctor works at"
            },
            "email": {
              "type": "string",
              "required": false,
              "description": "Email address of the doctor"
            },
            "phone": {
              "type": "string",
              "required": false,
              "description": "Phone number of the doctor"
            },
            "licenseNumber": {
              "type": "string",
              "required": false,
              "description": "Medical license number of the doctor"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Doctor updated successfully",
          "content_type": "application/json"
        },
        "404": {
          "description": "Doctor not found",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while updating doctor",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/doctors/{id}",
      "method": "DELETE",
      "service_name": "DoctorService",
      "description": "Deletes a doctor from the system",
      "file_path": "backend/doctor-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the doctor"
          }
        ]
      },
      "responses": {
        "200": {
          "description": "Doctor deleted successfully",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "message": "string"
            }
          }
        },
        "404": {
          "description": "Doctor not found",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while deleting doctor",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/hospitals/{hospitalId}/doctors",
      "method": "GET",
      "service_name": "DoctorService",
      "description": "Retrieves all doctors associated with a specific hospital",
      "file_path": "backend/doctor-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "hospitalId",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the hospital"
          }
        ]
      },
      "responses": {
        "200": {
          "description": "Returns an array of doctor objects associated with the specified hospital",
          "content_type": "application/json"
        },
        "500": {
          "description": "Server error while fetching doctors for the hospital",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/health",
      "method": "GET",
      "service_name": "DoctorService",
      "description": "Health check endpoint for the doctor service",
      "file_path": "backend/doctor-service/server.js",
      "responses": {
        "200": {
          "description": "Service is healthy",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "status": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/hospitals",
      "method": "GET",
      "service_name": "HospitalService",
      "description": "Retrieves a list of all hospitals",
      "file_path": "backend/hospital-service/server.js",
      "responses": {
        "200": {
          "description": "Returns an array of hospital objects",
          "content_type": "application/json"
        },
        "500": {
          "description": "Server error while fetching hospitals",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/hospitals/{id}",
      "method": "GET",
      "service_name": "HospitalService",
      "description": "Retrieves details of a specific hospital by ID",
      "file_path": "backend/hospital-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the hospital"
          }
        ]
      },
      "responses": {
        "200": {
          "description": "Returns the hospital object matching the provided ID",
          "content_type": "application/json"
        },
        "404": {
          "description": "Hospital not found",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while fetching hospital",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/hospitals",
      "method": "POST",
      "service_name": "HospitalService",
      "description": "Creates a new hospital",
      "file_path": "backend/hospital-service/server.js",
      "parameters": {
        "body": {
          "type": "object",
          "required": true,
          "description": "Hospital information to be created",
          "properties": {
            "name": {
              "type": "string",
              "required": true,
              "description": "Name of the hospital"
            },
            "address": {
              "type": "string",
              "required": true,
              "description": "Address of the hospital"
            },
            "phone": {
              "type": "string",
              "required": true,
              "description": "Phone number of the hospital"
            },
            "email": {
              "type": "string",
              "required": false,
              "description": "Email address of the hospital"
            },
            "capacity": {
              "type": "number",
              "required": false,
              "description": "Capacity of the hospital"
            },
            "services": {
              "type": "array",
              "required": false,
              "description": "Services offered by the hospital"
            },
            "operatingHours": {
              "type": "object",
              "required": false,
              "description": "Operating hours of the hospital"
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Hospital created successfully",
          "content_type": "application/json"
        },
        "400": {
          "description": "Bad request - missing required fields",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while creating hospital",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/hospitals/{id}",
      "method": "PUT",
      "service_name": "HospitalService",
      "description": "Updates details of an existing hospital",
      "file_path": "backend/hospital-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the hospital"
          }
        ],
        "body": {
          "type": "object",
          "required": true,
          "description": "Hospital information to be updated",
          "properties": {
            "name": {
              "type": "string",
              "required": false,
              "description": "Name of the hospital"
            },
            "address": {
              "type": "string",
              "required": false,
              "description": "Address of the hospital"
            },
            "phone": {
              "type": "string",
              "required": false,
              "description": "Phone number of the hospital"
            },
            "email": {
              "type": "string",
              "required": false,
              "description": "Email address of the hospital"
            },
            "capacity": {
              "type": "number",
              "required": false,
              "description": "Capacity of the hospital"
            },
            "services": {
              "type": "array",
              "required": false,
              "description": "Services offered by the hospital"
            },
            "operatingHours": {
              "type": "object",
              "required": false,
              "description": "Operating hours of the hospital"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Hospital updated successfully",
          "content_type": "application/json"
        },
        "404": {
          "description": "Hospital not found",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while updating hospital",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/hospitals/{id}",
      "method": "DELETE",
      "service_name": "HospitalService",
      "description": "Deletes a hospital from the system",
      "file_path": "backend/hospital-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the hospital"
          }
        ]
      },
      "responses": {
        "200": {
          "description": "Hospital deleted successfully",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "message": "string"
            }
          }
        },
        "404": {
          "description": "Hospital not found",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while deleting hospital",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/health",
      "method": "GET",
      "service_name": "HospitalService",
      "description": "Health check endpoint for the hospital service",
      "file_path": "backend/hospital-service/server.js",
      "responses": {
        "200": {
          "description": "Service is healthy",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "status": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/pets",
      "method": "GET",
      "service_name": "PetService",
      "description": "Retrieves a list of all pets",
      "file_path": "backend/pet-service/server.js",
      "responses": {
        "200": {
          "description": "Returns an array of pet objects",
          "content_type": "application/json"
        },
        "500": {
          "description": "Server error while fetching pets",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/pets/{id}",
      "method": "GET",
      "service_name": "PetService",
      "description": "Retrieves details of a specific pet by ID",
      "file_path": "backend/pet-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the pet"
          }
        ]
      },
      "responses": {
        "200": {
          "description": "Returns the pet object matching the provided ID",
          "content_type": "application/json"
        },
        "404": {
          "description": "Pet not found",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while fetching pet",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/pets",
      "method": "POST",
      "service_name": "PetService",
      "description": "Creates a new pet",
      "file_path": "backend/pet-service/server.js",
      "parameters": {
        "body": {
          "type": "object",
          "required": true,
          "description": "Pet information to be created",
          "properties": {
            "name": {
              "type": "string",
              "required": true,
              "description": "Name of the pet"
            },
            "species": {
              "type": "string",
              "required": true,
              "description": "Species of the pet"
            },
            "breed": {
              "type": "string",
              "required": false,
              "description": "Breed of the pet"
            },
            "age": {
              "type": "number",
              "required": false,
              "description": "Age of the pet"
            },
            "ownerName": {
              "type": "string",
              "required": true,
              "description": "Name of the pet's owner"
            },
            "ownerContact": {
              "type": "string",
              "required": true,
              "description": "Contact information of the pet's owner"
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Pet created successfully",
          "content_type": "application/json"
        },
        "400": {
          "description": "Bad request - missing required fields",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while creating pet",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/pets/{id}",
      "method": "PUT",
      "service_name": "PetService",
      "description": "Updates details of an existing pet",
      "file_path": "backend/pet-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the pet"
          }
        ],
        "body": {
          "type": "object",
          "required": true,
          "description": "Pet information to be updated",
          "properties": {
            "name": {
              "type": "string",
              "required": false,
              "description": "Name of the pet"
            },
            "species": {
              "type": "string",
              "required": false,
              "description": "Species of the pet"
            },
            "breed": {
              "type": "string",
              "required": false,
              "description": "Breed of the pet"
            },
            "age": {
              "type": "number",
              "required": false,
              "description": "Age of the pet"
            },
            "ownerName": {
              "type": "string",
              "required": false,
              "description": "Name of the pet's owner"
            },
            "ownerContact": {
              "type": "string",
              "required": false,
              "description": "Contact information of the pet's owner"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Pet updated successfully",
          "content_type": "application/json"
        },
        "404": {
          "description": "Pet not found",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while updating pet",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/pets/{id}",
      "method": "DELETE",
      "service_name": "PetService",
      "description": "Deletes a pet from the system",
      "file_path": "backend/pet-service/server.js",
      "parameters": {
        "path": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "description": "Unique identifier of the pet"
          }
        ]
      },
      "responses": {
        "200": {
          "description": "Pet deleted successfully",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "message": "string"
            }
          }
        },
        "404": {
          "description": "Pet not found",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        },
        "500": {
          "description": "Server error while deleting pet",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "error": "string"
            }
          }
        }
      }
    },
    {
      "type": "rest",
      "endpoint": "/health",
      "method": "GET",
      "service_name": "PetService",
      "description": "Health check endpoint for the pet service",
      "file_path": "backend/pet-service/server.js",
      "responses": {
        "200": {
          "description": "Service is healthy",
          "content_type": "application/json",
          "schema": {
            "type": "object",
            "properties": {
              "status": "string"
            }
          }
        }
      }
    }
  ],
  "consumed_apis": [
    {
      "type": "rest",
      "service": "DoctorService",
      "endpoint": "/api/doctors",
      "method": "GET",
      "description": "Fetches a list of all doctors",
      "file_path": "frontend/src/pages/Doctors.js",
      "expected_response": {
        "id": "string",
        "firstName": "string",
        "lastName": "string",
        "specialization": "string",
        "hospitalId": "string",
        "phone": "string",
        "email": "string"
      }
    },
    {
      "type": "rest",
      "service": "DoctorService",
      "endpoint": "/api/doctors",
      "method": "POST",
      "description": "Creates a new doctor",
      "file_path": "frontend/src/pages/Doctors.js",
      "request_payload": {
        "firstName": "string",
        "lastName": "string",
        "specialization": "string",
        "hospitalId": "string",
        "email": "string",
        "phone": "string",
        "licenseNumber": "string"
      },
      "expected_response": {
        "id": "string",
        "firstName": "string",
        "lastName": "string",
        "specialization": "string",
        "hospitalId": "string",
        "email": "string",
        "phone": "string",
        "licenseNumber": "string",
        "createdAt": "string",
        "updatedAt": "string"
      }
    },
    {
      "type": "rest",
      "service": "HospitalService",
      "endpoint": "/api/hospitals",
      "method": "GET",
      "description": "Fetches a list of all hospitals",
      "file_path": "frontend/src/pages/Hospitals.js",
      "expected_response": {
        "id": "string",
        "name": "string",
        "address": "string",
        "phone": "string",
        "email": "string",
        "services": "array",
        "capacity": "number",
        "operatingHours": "object"
      }
    },
    {
      "type": "rest",
      "service": "HospitalService",
      "endpoint": "/api/hospitals",
      "method": "POST",
      "description": "Creates a new hospital",
      "file_path": "frontend/src/pages/Hospitals.js",
      "request_payload": {
        "name": "string",
        "address": "string",
        "phone": "string",
        "email": "string",
        "services": "array"
      },
      "expected_response": {
        "id": "string",
        "name": "string",
        "address": "string",
        "phone": "string",
        "email": "string",
        "services": "array",
        "operatingHours": "object",
        "createdAt": "string",
        "updatedAt": "string"
      }
    },
    {
      "type": "rest",
      "service": "PetService",
      "endpoint": "/api/pets",
      "method": "GET",
      "description": "Fetches a list of all pets",
      "file_path": "frontend/src/pages/Pets.js",
      "expected_response": [
        {
          "id": "string",
          "name": "string",
          "species": "string",
          "breed": "string",
          "age": "number",
          "ownerName": "string",
          "ownerContact": "string"
        }
      ]
    },
    {
      "type": "rest",
      "service": "PetService",
      "endpoint": "/api/pets",
      "method": "POST",
      "description": "Creates a new pet",
      "file_path": "frontend/src/pages/Pets.js",
      "request_payload": {
        "name": "string",
        "species": "string",
        "breed": "string",
        "age": "number",
        "ownerName": "string",
        "ownerContact": "string"
      }
    },
    {
      "type": "rest",
      "service": "PetService",
      "endpoint": "/api/pets/{id}",
      "method": "PUT",
      "description": "Updates an existing pet",
      "file_path": "frontend/src/pages/Pets.js",
      "request_payload": {
        "name": "string",
        "species": "string",
        "breed": "string",
        "age": "number",
        "ownerName": "string",
        "ownerContact": "string"
      }
    },
    {
      "type": "rest",
      "service": "PetService",
      "endpoint": "/api/pets/{id}",
      "method": "DELETE",
      "description": "Deletes an existing pet",
      "file_path": "frontend/src/pages/Pets.js"
    },
    {
      "type": "rest",
      "service": "PetService",
      "endpoint": "/api/pets",
      "method": "GET",
      "description": "Fetches pet counts for the dashboard",
      "file_path": "frontend/src/pages/Dashboard.js",
      "expected_response": [
        {
          "id": "string",
          "name": "string",
          "species": "string",
          "breed": "string",
          "age": "number",
          "ownerName": "string",
          "ownerContact": "string"
        }
      ]
    },
    {
      "type": "rest",
      "service": "HospitalService",
      "endpoint": "/api/hospitals",
      "method": "GET",
      "description": "Fetches hospital counts for the dashboard",
      "file_path": "frontend/src/pages/Dashboard.js",
      "expected_response": [
        {
          "id": "string",
          "name": "string",
          "address": "string",
          "phone": "string",
          "email": "string"
        }
      ]
    },
    {
      "type": "rest",
      "service": "DoctorService",
      "endpoint": "/api/doctors",
      "method": "GET",
      "description": "Fetches doctor counts for the dashboard",
      "file_path": "frontend/src/pages/Dashboard.js",
      "expected_response": [
        {
          "id": "string",
          "firstName": "string",
          "lastName": "string",
          "specialization": "string",
          "hospitalId": "string"
        }
      ]
    },
    {
      "type": "rest",
      "service": "VisitService",
      "endpoint": "/api/visits",
      "method": "GET",
      "description": "Fetches visit counts for the dashboard",
      "file_path": "frontend/src/pages/Dashboard.js",
      "expected_response": [
        {
          "id": "string"
        }
      ]
    }
  ]
}